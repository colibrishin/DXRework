#pragma once
#include "Source/Runtime/Core/Allocator/Public/Allocator.h"
#include "Source/Runtime/Core/TypeLibrary/Public/TypeLibrary.h"
#include "Source/Runtime/Core/ConcurrentTypeLibrary/Public/ConcurrentTypeLibrary.h"
#include "Source/Runtime/Core/StructuredBuffer.h"

namespace Engine 
{
	using RenderInstanceIndex = uint64_t;
	using CandidateTuple = std::tuple<Weak<Engine::Abstracts::ObjectBase>, Weak<Engine::Resources::Material>, aligned_vector<Engine::Graphics::SBs::InstanceSB>>;
	using RenderMapValueType = tbb::concurrent_vector<CandidateTuple, u_align_allocator<CandidateTuple>>;
	using RenderMap = tbb::concurrent_hash_map<RenderInstanceIndex, RenderMapValueType>;

	enum RENDERPIPELINE_API eFormat : uint8_t
	{
		TEX_FORMAT_UNKNOWN = 0,
		TEX_FORMAT_R32G32B32A32_TYPELESS = 1,
		TEX_FORMAT_R32G32B32A32_FLOAT = 2,
		TEX_FORMAT_R32G32B32A32_UINT = 3,
		TEX_FORMAT_R32G32B32A32_SINT = 4,
		TEX_FORMAT_R32G32B32_TYPELESS = 5,
		TEX_FORMAT_R32G32B32_FLOAT = 6,
		TEX_FORMAT_R32G32B32_UINT = 7,
		TEX_FORMAT_R32G32B32_SINT = 8,
		TEX_FORMAT_R16G16B16A16_TYPELESS = 9,
		TEX_FORMAT_R16G16B16A16_FLOAT = 10,
		TEX_FORMAT_R16G16B16A16_UNORM = 11,
		TEX_FORMAT_R16G16B16A16_UINT = 12,
		TEX_FORMAT_R16G16B16A16_SNORM = 13,
		TEX_FORMAT_R16G16B16A16_SINT = 14,
		TEX_FORMAT_R32G32_TYPELESS = 15,
		TEX_FORMAT_R32G32_FLOAT = 16,
		TEX_FORMAT_R32G32_UINT = 17,
		TEX_FORMAT_R32G32_SINT = 18,
		TEX_FORMAT_R32G8X24_TYPELESS = 19,
		TEX_FORMAT_D32_FLOAT_S8X24_UINT = 20,
		TEX_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
		TEX_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
		TEX_FORMAT_R10G10B10A2_TYPELESS = 23,
		TEX_FORMAT_R10G10B10A2_UNORM = 24,
		TEX_FORMAT_R10G10B10A2_UINT = 25,
		TEX_FORMAT_R11G11B10_FLOAT = 26,
		TEX_FORMAT_R8G8B8A8_TYPELESS = 27,
		TEX_FORMAT_R8G8B8A8_UNORM = 28,
		TEX_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
		TEX_FORMAT_R8G8B8A8_UINT = 30,
		TEX_FORMAT_R8G8B8A8_SNORM = 31,
		TEX_FORMAT_R8G8B8A8_SINT = 32,
		TEX_FORMAT_R16G16_TYPELESS = 33,
		TEX_FORMAT_R16G16_FLOAT = 34,
		TEX_FORMAT_R16G16_UNORM = 35,
		TEX_FORMAT_R16G16_UINT = 36,
		TEX_FORMAT_R16G16_SNORM = 37,
		TEX_FORMAT_R16G16_SINT = 38,
		TEX_FORMAT_R32_TYPELESS = 39,
		TEX_FORMAT_D32_FLOAT = 40,
		TEX_FORMAT_R32_FLOAT = 41,
		TEX_FORMAT_R32_UINT = 42,
		TEX_FORMAT_R32_SINT = 43,
		TEX_FORMAT_R24G8_TYPELESS = 44,
		TEX_FORMAT_D24_UNORM_S8_UINT = 45,
		TEX_FORMAT_R24_UNORM_X8_TYPELESS = 46,
		TEX_FORMAT_X24_TYPELESS_G8_UINT = 47,
		TEX_FORMAT_R8G8_TYPELESS = 48,
		TEX_FORMAT_R8G8_UNORM = 49,
		TEX_FORMAT_R8G8_UINT = 50,
		TEX_FORMAT_R8G8_SNORM = 51,
		TEX_FORMAT_R8G8_SINT = 52,
		TEX_FORMAT_R16_TYPELESS = 53,
		TEX_FORMAT_R16_FLOAT = 54,
		TEX_FORMAT_D16_UNORM = 55,
		TEX_FORMAT_R16_UNORM = 56,
		TEX_FORMAT_R16_UINT = 57,
		TEX_FORMAT_R16_SNORM = 58,
		TEX_FORMAT_R16_SINT = 59,
		TEX_FORMAT_R8_TYPELESS = 60,
		TEX_FORMAT_R8_UNORM = 61,
		TEX_FORMAT_R8_UINT = 62,
		TEX_FORMAT_R8_SNORM = 63,
		TEX_FORMAT_R8_SINT = 64,
		TEX_FORMAT_A8_UNORM = 65,
		TEX_FORMAT_R1_UNORM = 66,
		TEX_FORMAT_R9G9B9E5_SHAREDEXP = 67,
		TEX_FORMAT_R8G8_B8G8_UNORM = 68,
		TEX_FORMAT_G8R8_G8B8_UNORM = 69,
		TEX_FORMAT_BC1_TYPELESS = 70,
		TEX_FORMAT_BC1_UNORM = 71,
		TEX_FORMAT_BC1_UNORM_SRGB = 72,
		TEX_FORMAT_BC2_TYPELESS = 73,
		TEX_FORMAT_BC2_UNORM = 74,
		TEX_FORMAT_BC2_UNORM_SRGB = 75,
		TEX_FORMAT_BC3_TYPELESS = 76,
		TEX_FORMAT_BC3_UNORM = 77,
		TEX_FORMAT_BC3_UNORM_SRGB = 78,
		TEX_FORMAT_BC4_TYPELESS = 79,
		TEX_FORMAT_BC4_UNORM = 80,
		TEX_FORMAT_BC4_SNORM = 81,
		TEX_FORMAT_BC5_TYPELESS = 82,
		TEX_FORMAT_BC5_UNORM = 83,
		TEX_FORMAT_BC5_SNORM = 84,
		TEX_FORMAT_B5G6R5_UNORM = 85,
		TEX_FORMAT_B5G5R5A1_UNORM = 86,
		TEX_FORMAT_B8G8R8A8_UNORM = 87,
		TEX_FORMAT_B8G8R8X8_UNORM = 88,
		TEX_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
		TEX_FORMAT_B8G8R8A8_TYPELESS = 90,
		TEX_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
		TEX_FORMAT_B8G8R8X8_TYPELESS = 92,
		TEX_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
		TEX_FORMAT_BC6H_TYPELESS = 94,
		TEX_FORMAT_BC6H_UF16 = 95,
		TEX_FORMAT_BC6H_SF16 = 96,
		TEX_FORMAT_BC7_TYPELESS = 97,
		TEX_FORMAT_BC7_UNORM = 98,
		TEX_FORMAT_BC7_UNORM_SRGB = 99,
		TEX_FORMAT_AYUV = 100,
		TEX_FORMAT_Y410 = 101,
		TEX_FORMAT_Y416 = 102,
		TEX_FORMAT_NV12 = 103,
		TEX_FORMAT_P010 = 104,
		TEX_FORMAT_P016 = 105,
		TEX_FORMAT_420_OPAQUE = 106,
		TEX_FORMAT_YUY2 = 107,
		TEX_FORMAT_Y210 = 108,
		TEX_FORMAT_Y216 = 109,
		TEX_FORMAT_NV11 = 110,
		TEX_FORMAT_AI44 = 111,
		TEX_FORMAT_IA44 = 112,
		TEX_FORMAT_P8 = 113,
		TEX_FORMAT_A8P8 = 114,
		TEX_FORMAT_B4G4R4A4_UNORM = 115,

		TEX_FORMAT_P208 = 130,
		TEX_FORMAT_V208 = 131,
		TEX_FORMAT_V408 = 132,

		TEX_FORMAT_A4B4G4R4_UNORM = 191
	};

	constexpr std::vector<eFormat> GetDefaultRTVFormat() 
	{
		std::vector<eFormat> v = { TEX_FORMAT_R8G8B8A8_UNORM };
		return v;
	}

	enum RENDERPIPELINE_API eSamplerFilter
	{
		SAMPLER_FILTER_MIN_MAG_MIP_POINT = 0,
		SAMPLER_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
		SAMPLER_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
		SAMPLER_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
		SAMPLER_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
		SAMPLER_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
		SAMPLER_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
		SAMPLER_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
		SAMPLER_FILTER_MIN_MAG_ANISOTROPIC_MIP_POINT = 0x54,
		SAMPLER_FILTER_ANISOTROPIC = 0x55,
		SAMPLER_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
		SAMPLER_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
		SAMPLER_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
		SAMPLER_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
		SAMPLER_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
		SAMPLER_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
		SAMPLER_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
		SAMPLER_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
		SAMPLER_FILTER_COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT = 0xd4,
		SAMPLER_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
		SAMPLER_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
		SAMPLER_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
		SAMPLER_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
		SAMPLER_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
		SAMPLER_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
		SAMPLER_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
		SAMPLER_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
		SAMPLER_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
		SAMPLER_FILTER_MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT = 0x154,
		SAMPLER_FILTER_MINIMUM_ANISOTROPIC = 0x155,
		SAMPLER_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
		SAMPLER_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
		SAMPLER_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
		SAMPLER_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
		SAMPLER_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
		SAMPLER_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
		SAMPLER_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
		SAMPLER_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
		SAMPLER_FILTER_MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT = 0x1d4,
		SAMPLER_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
	};

	enum RENDERPIPELINE_API ePrimitiveTopologyType
	{
		PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
		PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
		PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
		PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
		PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4
	};

	enum RENDERPIPELINE_API ePrimitiveTopology
	{
		PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
		PRIMITIVE_TOPOLOGY_POINTLIST = 1,
		PRIMITIVE_TOPOLOGY_LINELIST = 2,
		PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
		PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
		PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
		PRIMITIVE_TOPOLOGY_TRIANGLEFAN = 6,
		PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
		PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
		PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
		PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
		PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
		PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
		PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
		PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
		PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
		PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
		PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
		PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
		PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
		PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
		PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
		PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
		PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
		PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
		PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
		PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
		PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
		PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
		PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
		PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
		PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
		PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
		PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
		PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
		PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
		PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
		PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
		PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
		PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
		PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
		PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
		PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64
	};

	struct RENDERPIPELINE_API Viewport
	{
		float topLeftX;
		float topLeftY;
		float width;
		float height;
		float minDepth;
		float maxDepth;
	};

	struct RENDERPIPELINE_API PrimitivePipeline
	{
	public:
		virtual      ~PrimitivePipeline() = default;
		virtual void Generate() = 0;
		[[nodiscard]] void* GetNativePipeline() const;

	protected:
		void SetPrimitivePipeline(void* pipeline);

	private:
		void* m_pipeline_ = nullptr;
	};
}