// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define SERIALIZER_ACCESS friend class boost::serialization::access; template<class Archive> void serialize(Archive & ar, const unsigned int file_version);
#define SERIALIZER_ACCESS_IMPL2(NAMESPACE_TYPE, __VA_ARGS__) template <class Archive> void NAMESPACE_TYPE::serialize(Archive& ar, const unsigned int file_version) { __VA_ARGS__ }
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define SERIALIZER_ACCESS_IMPL2(NAMESPACE_TYPE, __VA_ARGS__) template <class Archive> void NAMESPACE_TYPE::serialize(Archive& ar, const unsigned int file_version) { __VA_ARGS__ }
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define SERIALIZER_ACCESS_IMPL2(NAMESPACE_TYPE, __VA_ARGS__) template <class Archive> void NAMESPACE_TYPE::serialize(Archive& ar, const unsigned int file_version) { __VA_ARGS__ }
#define SERIALIZER_ACCESS_IMPL3(NAMESPACE_TYPE, __VA_ARGS__) SERIALIZER_ACCESS_IMPL(NAMESPACE_TYPE) SERIALIZER_ACCESS_IMPL2(NAMESPACE_TYPE, __VA_ARGS__)
#define _BSTSUPER(BASE) boost::serialization::base_object<BASE>(*this)
#define INTERNAL_COMP_CHECK_CONSTEXPR(enum_val)
#define RESOURCE_SELF_INFER_GETTER(TYPE) static inline boost::weak_ptr<TYPE> Get(const std::string& name) { return GetResourceManager().GetResource<TYPE>(name); }
#define RESOURCE_SELF_INFER_CREATE(TYPE) static inline boost::shared_ptr<TYPE> Create( const std::string& name, const std::filesystem::path& path) { if (const auto check = GetResourceManager(). GetResource<TYPE>(path).lock()) { return check; } const auto obj = boost::make_shared<TYPE>(path); GetResourceManager().AddResource(name, obj); return obj; }
#define INTERNAL_CB_CHECK_CONSTEXPR(enum_val)
